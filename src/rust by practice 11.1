fn main() {
    let mut s: String = "hello, ".to_string();
    s.push_str("world"); // Fixed: removed unnecessary `.to_string()`
    s.push('!'); // Fixed: we need to push a character, not a string
    
    println!("{}", s); // It will print: "hello, world!"
}
fn main() {  
    let mut s = String::from("hello, world");

    let slice1: &str = &s; // First way: a direct reference to the entire string
    assert_eq!(slice1, "hello, world");

    let slice2 = &s[0..5]; // Second way: using slicing to take the first 5 characters
    assert_eq!(slice2, "hello");

    let mut slice3: String = s[0..5].to_string(); // Convert slice to String and push '!'
    slice3.push('!');
    assert_eq!(slice3, "hello!"); // This will include the '!' character

    println!("Success!");
}
fn main() {  
    // Create a String type based on `&str`
    let s: String = String::from("hello, world!");

    // Create a slice pointing to String `s`
    let slice: &str = &s;

    // Create a String type based on the recently created slice
    let s2: String = slice.to_string(); // This creates a new heap-allocated string.

    assert_eq!(s2, "hello, world!");

    println!("Success!");
}
fn main() {
    let s = String::from("hello, 世界");
    let slice1 = &s[0..1]; // `h` takes 1 byte in UTF-8 format
    assert_eq!(slice1, "h");

    let slice2 = &s[3..6]; // `世` takes 3 bytes in UTF-8 format
    assert_eq!(slice2, "世");

    // Iterate through all chars in s
    for (i, c) in s.chars().enumerate() { // Using `chars()` to iterate through each character
        if i == 7 {
            assert_eq!(c, '世');
        }
    }

    println!("Success!");
}
fn main() {
    let mut s = String::new();
    s.push_str("hello"); // Add "hello" to `s`

    // Some bytes, in a vector
    let v = vec![104, 101, 108, 108, 111]; // Corresponding to "hello"

    // Turn a byte's vector into a String
    let s1 = String::from_utf8(v).unwrap(); // Using from_utf8 to convert bytes to String
    
    assert_eq!(s, s1);

    println!("Success!");
}
fn main() {
    let mut s = String::new();

    println!("{}", s.capacity()); // Initial capacity of the empty String

    for _ in 0..2 {
        s.push_str("hello");
        println!("{}", s.capacity()); // Print capacity after appending "hello"
    }

    println!("Success!");
}
use std::mem;

fn main() {
    let story = String::from("Rust By Practice");

    // Prevent automatically dropping of the String's data
    let mut story = mem::ManuallyDrop::new(story);

    let ptr = story.as_mut_ptr();
    let len = story.len();
    let capacity = story.capacity();

    assert_eq!(16, len); // Length of the String is 16

    // We can rebuild a String out of ptr, len, and capacity. This is all
    // unsafe because we are responsible for making sure the components are
    // valid:
    let s = unsafe { String::from_raw_parts(ptr, len, capacity) };

    assert_eq!(*story, s);

    println!("Success!");
}
fn main() {
    let s = String::from("hello, world!");
    move_ownership(s);

    // After the move, `s` is no longer accessible
    // assert_eq!(s, "hello, world!"); // This will cause an error because ownership was moved

    println!("Success!");
}

fn move_ownership(s: String) {
    println!("ownership of \"{}\" is moved here!", s)
}
