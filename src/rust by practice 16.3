fn main() {
    println!("{0}, this is {1}. {1}, this is {0}", "Alice", "Bob"); // => Alice, this is Bob. Bob, this is Alice
    assert_eq!(format!("{1}{0}", 1, 2), "21");  // Fill the blank with "21"
    assert_eq!(format!("{0}{1}", 1, 2), "12");  // Format the positional argument properly
    println!("Success!");
}
fn main() {
    println!("{argument}", argument = "test"); // => "test"

    assert_eq!(format!("{name}{}", 1, name="test"), "test1");  // Use `name="test"` for the first argument
    assert_eq!(format!("{a} {c} {b}", a = "a", b = 'b', c = 3), "a 3 b"); // Format with named arguments
    
    // Named argument must be placed after other arguments
    println!("{abc} {1}", abc = "def", 2);

    println!("Success!");
}
fn main() {
    // The following two are padding with 5 spaces
    println!("Hello {:5}!", "x"); // =>  "Hello x    !"  
    println!("Hello {:1$}!", "x", 5); // =>  "Hello x    !"

    assert_eq!(format!("Hello {:<5}!", "x"), "Hello x    !");  // Left pad with space
    assert_eq!(format!("Hello {:>5}!", "x"), "Hello     x!");  // Right pad with space
    assert_eq!(format!("Hello {:^5}!", "x"), "Hello   x  !");  // Center pad with space

    println!("Success!");
}
fn main() {
    println!("Hello {:5}!", 5); // => Hello     5!
    println!("Hello {:+}!", 5); // =>  Hello +5!
    println!("Hello {:05}!", 5); // => Hello 00005!
    println!("Hello {:05}!", -5); // => Hello -0005!

    assert!(format!("{number:0>width$}", number=1, width=6) == "000001"); // Fill with zeros to match the width

    println!("Success!");
}
fn main() {
    let v = 3.1415926;

    println!("{:.1$}", v, 4); // same as {:.4} => 3.1416 

    assert_eq!(format!("{:.2}", v), "3.14"); // Format the floating point to 2 decimals
    assert_eq!(format!("{:+.2}", v), "+3.14"); // Show sign and format to 2 decimals
    assert_eq!(format!("{:.0}", v), "3"); // Format with no decimals

    println!("Success!");
}
fn main() {
    let s = "Hello, world!";

    println!("{0:.5}", s); // => Hello

    assert_eq!(format!("Hello {0:.3}!", "abcdefg"), "Hello abc!");  // Print the first 3 characters of the string

    println!("Success!");
}
fn main() {
    assert_eq!(format!("{:b}", 27), "11011"); // Binary format
    assert_eq!(format!("{:o}", 27), "33");    // Octal format
    assert_eq!(format!("{:x}", 27), "1b");    // Hexadecimal format (lowercase)
    assert_eq!(format!("{:X}", 27), "1B");    // Hexadecimal format (uppercase)

    println!("{:x}!", 27); // Hex with no prefix => 1b

    println!("{:#010b}", 27); // Pad binary with 0, width = 10,  => 0b00011011

    println!("Success!");
}
fn get_person() -> String {
    String::from("sunface")
}

fn get_format() -> (usize, usize) {
    (4, 1)
}

fn main() {
    let person = get_person();
    println!("Hello, {person}!");

    let (width, precision) = get_format();
    let scores = [("sunface", 99.12), ("jack", 60.34)];

    for (name, score) in scores {
        println!("{name}: {score:.1$}", score, precision);
    }
}
