// Приклад 1: Отримання адреси пам'яті змінної
fn main() {
   let x = 5;
   // Отримуємо посилання на x
   let p = &x;

   println!("the memory address of x is {:p}", p); // Один з можливих результатів: 0x16fa3ac84
}

// Приклад 2: Використання посилання для порівняння значень
fn main() {
    let x = 5;
    let y = &x;

    // Модифікуємо цю лінію, щоб порівняння працювало
    assert_eq!(5, *y); // Використовуємо розіменування для доступу до значення

    println!("Success!");
}

// Приклад 3: Пошук помилки з позичанням (borrow)
fn main() {
    let mut s = String::from("hello, ");

    borrow_object(&s); // Позичаємо лише посилання, без зміни

    println!("Success!");
}

fn borrow_object(s: &String) {}

// Приклад 4: Модифікація для передачі мутабельного посилання
fn main() {
    let mut s = String::from("hello, ");

    push_str(&mut s); // Передаємо мутабельне посилання

    println!("Success!");
}

fn push_str(s: &mut String) {
    s.push_str("world")
}

// Приклад 5: Використання мутабельного посилання для зміни значення
fn main() {
    let mut s = String::from("hello, ");

    // Використовуємо мутабельне посилання
    let p = &mut s; 
    
    p.push_str("world");

    println!("Success!");
}

// Приклад 6: Використання розіменування та адрес
fn main() {
    let c = '中';

    let r1 = &c;
    // Заповнення порожнього місця
    let r2 = &c;

    assert_eq!(*r1, *r2); // Розіменовуємо для порівняння значень
    
    // Перевіряємо рівність адрес
    assert_eq!(get_addr(r1), get_addr(r2));

    println!("Success!");
}

// Отримання рядка з адресою пам'яті
fn get_addr(r: &char) -> String {
    format!("{:p}", r)
}

// Приклад 7: Усунення помилки з двома мутабельними посиланнями
fn main() {
    let mut s = String::from("hello");

    let r1 = &mut s;
    // Вилучаємо зайве посилання
    // let r2 = &mut s; // Цей рядок спричиняє помилку, бо не можна мати два мутабельні посилання одночасно

    println!("{}", r1);

    println!("Success!");
}

// Приклад 8: Передача мутабельного посилання до функції
fn main() {
    let mut s = String::from("hello, ");

    borrow_object(&mut s); // Передаємо мутабельне посилання

    println!("Success!");
}

fn borrow_object(s: &mut String) {}

// Приклад 9: Виправлення помилки при одночасному позичанні
fn main() {
    let mut s = String::from("hello, ");

    let r1 = &mut s;
    r1.push_str("world");
    let r2 = &mut s; // Цей рядок спричиняє помилку через одночасне позичання

    println!("{}", r1);
}

// Приклад 10: Додавання рядка, щоб спричинити помилку з мутабельними посиланнями
fn main() {
    let mut s = String::from("hello, ");

    let r1 = &mut s;
    r1.push_str("world");

    let r2 = &mut s; // Неможливо мати два мутабельних посилання одночасно

    // Додаємо рядок для виникнення помилки компіляції:
    // let r3 = &mut s; // Додати це, щоб викликати помилку

    println!("{}", r1);
}
