fn main() {
    let i = 3;                                             
    {                                                    
        let borrow1 = &i; // borrow1 lifetime starts here. ──┐
        //                                                    │
        println!("borrow1: {}", borrow1); //                │
    } // borrow1 ends here. ───────────────────────────────┘
    {                                                    
        let borrow2 = &i;  // borrow2 lifetime starts here.
                                                         
        println!("borrow2: {}", borrow2);               
    } // borrow2 ends here.
}
fn invalid_output<'a>() -> &'a String { 
    &String::from("foo") 
}

fn main() {}
fn valid_output<'a>() -> &'a str {
    static FOO: &str = "foo";
    FOO
}

fn main() {
    println!("{}", valid_output());
}
fn valid_output<'a>(s: &'a String) -> &'a str {
    &s[..]
}

fn main() {
    let s = String::from("foo");
    println!("{}", valid_output(&s));
}
fn print_refs<'a, 'b>(x: &'a i32, y: &'b i32) {
    println!("x is {} and y is {}", x, y);
}

fn main() {
    let (four, nine) = (4, 9);
    
    print_refs(&four, &nine);  // Both references live long enough
    
    // `failed_borrow()` would not compile since `_x` has a shorter lifetime
}
#[derive(Debug)]
struct Borrowed<'a>(&'a i32);

#[derive(Debug)]
struct NamedBorrowed<'a> {
    x: &'a i32,
    y: &'a i32,
}

#[derive(Debug)]
enum Either<'a> {
    Num(i32),
    Ref(&'a i32),
}

fn main() {
    let x = 18;
    let y = 15;

    let single = Borrowed(&x);
    let double = NamedBorrowed { x: &x, y: &y };
    let reference = Either::Ref(&x);
    let number = Either::Num(y);

    println!("x is borrowed in {:?}", single);
    println!("x and y are borrowed in {:?}", double);
    println!("x is borrowed in {:?}", reference);
    println!("y is *not* borrowed in {:?}", number);
}
#[derive(Debug)]
struct NoCopyType {}

#[derive(Debug)]
struct Example<'a, 'b> {
    a: &'a u32,
    b: &'b NoCopyType,
}

fn main() { 
    let var_a = 35;
    let example;

    {
        let var_b = NoCopyType {};
        example = Example { a: &var_a, b: &var_b };
    }
    println!("(Success!) {:?}", example);
}
#[derive(Debug)]
struct NoCopyType {}

#[derive(Debug)]
#[allow(dead_code)]
struct Example<'a, 'b> {
    a: &'a u32,
    b: &'b NoCopyType,
}

fn fix_me(foo: &Example) -> &NoCopyType {
    foo.b
}

fn main() {
    let no_copy = NoCopyType {};
    let example = Example { a: &1, b: &no_copy };
    fix_me(&example);
    println!("Success!")
}
fn input(x: &i32) {
    println!("`annotated_input`: {}", x);
}

fn pass(x: &i32) -> &i32 { x }

fn longest<'a, 'b>(x: &'a str, y: &'b str) -> &'a str {
    x
}

struct Owner(i32);

impl Owner {
    fn add_one(&mut self) { self.0 += 1; }
    fn print(&self) {
        println!("`print`: {}", self.0);
    }
}

struct Person<'a> {
    age: u8,
    name: &'a str,
}

enum Either<'a> {
    Num(i32),
    Ref(&'a i32),
}

fn main() {}
