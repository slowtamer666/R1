use std::fmt;

// Define the Wrapper type
struct Wrapper(Vec<String>);

// Display is an external trait
impl fmt::Display for Wrapper {
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        write!(f, "[{}]", self.0.join(", "))
    }
}

fn main() {
    // Vec is an external type, so you cannot implement Display trait on Vec type
    let w = Wrapper(vec![String::from("hello"), String::from("world")]);
    println!("w = {}", w);
}
struct Meters(u32);

impl Meters {
    // Implement a `pow` method for Meters
    pub fn pow(self, exp: u32) -> Meters {
        Meters(self.0.pow(exp))
    }
}

fn main() {
    let i: u32 = 2;
    assert_eq!(i.pow(2), 4);

    let n = Meters(i);
    // Now, calling `pow` is valid on Meters type
    assert_eq!(n.pow(2).0, 4);
}
struct Years(i64);
struct Days(i64);

impl Years {
    pub fn to_days(&self) -> Days {
        Days(self.0 * 365)
    }
}

impl Days {
    pub fn to_years(&self) -> Years {
        Years(self.0 / 365)
    }
}

// An age verification function that checks age in years, must be given a value of type Years.
fn old_enough(age: &Years) -> bool {
    age.0 >= 18
}

fn main() {
    let age = Years(5);
    let age_days = age.to_days();
    println!("Old enough {}", old_enough(&age));
    println!("Old enough {}", old_enough(&age_days.to_years())); // Convert days back to years
}
use std::ops::Add;
use std::fmt::{self, format};

struct Meters(u32);

impl fmt::Display for Meters {
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        write!(f, "There are still {} meters left", self.0)
    }
}

impl Add for Meters {
    type Output = Self;

    fn add(self, other: Meters) -> Self {
        Self(self.0 + other.0)
    }
}

fn calculate_distance(a: Meters, b: Meters) -> Meters {
    a + b
}

fn main() {
    let d = calculate_distance(Meters(10), Meters(20));
    assert_eq!(format!("{}", d), "There are still 30 meters left");
}
enum Operations {
    Add,
    Subtract,
}

fn main() {
    // We can refer to each variant via its alias, not its long and inconvenient
    // name.
    let x = Operations::Add;
}
// Use const generics to define a function returning an array of fixed size
fn my_function<const N: usize>() -> [u32; N] {
    [123; N]
}

fn main() {
    let arr = my_function::<5>();  // Specify the size at call time
    println!("{:?}", arr);
}
fn main() {
    let s: &str = "Hello there!";  // Use &str type for a string slice

    let arr: [u8; 3] = [1, 2, 3];  // Define an array with fixed size
}
use std::fmt::Display;

fn foobar<T: Display>(thing: T) {
    println!("{}", thing);
}

fn main() {
    let x = 5;
    let s = "Hello";
    
    foobar(x);
    foobar(s);
}
