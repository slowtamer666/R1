// Приклад 1: Структура Person та її ініціалізація
struct Person {
    name: String,
    age: u8,
    hobby: String,
}
fn main() {
    let age = 30;
    let p = Person {
        name: String::from("sunface"),
        age,
        hobby: String::from("programming"), // Додано поле hobby
    };

    println!("Success!");
}

// Приклад 2: Порожня структура Unit і її реалізація трейту
struct Unit;
trait SomeTrait {
    // ...Some behaviors defined here.
}

// Реалізація трейту для структури Unit
impl SomeTrait for Unit {  }

fn main() {
    let u = Unit;
    do_something_with_unit(u);

    println!("Success!");
}

fn do_something_with_unit(u: Unit) {   } // Потрібно передати тип Unit

// Приклад 3: Структури Color і Point, перевірка значень
struct Color(i32, i32, i32);
struct Point(i32, i32, i32);
fn main() {
    let v = Point(0, 127, 255); // Заповнено відповідно до Color
    check_color(v);

    println!("Success!");
}

fn check_color(p: Color) {
    let (x, _, _) = p;
    assert_eq!(x, 0);
    assert_eq!(p.1, 127);
    assert_eq!(p.2, 255); // Заповнив другий елемент
}

// Приклад 4: Структура Person з модифікацією значення поля
struct Person {
    name: String,
    age: u8,
}
fn main() {
    let age = 18;
    let mut p = Person {
        name: String::from("sunface"),
        age,
    };

    // Як можна вірити, що sunface лише 18? Ось тут ми змінюємо значення age
    p.age = 30;

    // Присвоєння нового значення для name
    p.name = String::from("sunfei");

    println!("Success!");
}

// Приклад 5: Побудова структури Person через функцію
struct Person {
    name: String,
    age: u8,
}
fn main() {
    let person = build_person(String::from("sunface"), 18); // Виклик функції

    println!("Success!");
}

fn build_person(name: String, age: u8) -> Person {
    Person {
        name, // Заповнення полів структури
        age,
    }
}

// Приклад 6: Використання структури User
struct User {
    active: bool,
    username: String,
    email: String,
    sign_in_count: u64,
}
fn main() {
    let u1 = User {
        email: String::from("someone@example.com"),
        username: String::from("sunface"),
        active: true,
        sign_in_count: 1,
    };

    let u2 = set_email(u1);

    println!("Success!");
}

fn set_email(u: User) -> User {
    User {
        email: String::from("contact@im.dev"),
        username: u.username, // Копіюємо username з u
        active: u.active,     // Копіюємо active з u
        sign_in_count: u.sign_in_count, // Копіюємо sign_in_count з u
    }
}

// Приклад 7: Структура Rectangle з атрибутом derive
#[derive(Debug)] // Додав derive Debug
struct Rectangle {
    width: u32,
    height: u32,
}

fn main() {
    let scale = 2;
    let rect1 = Rectangle {
        width: dbg!(30 * scale), // Друкуємо значення для width
        height: 50,
    };

    dbg!(&rect1); // Друкуємо інформацію про rect1

    println!("{:?}", rect1); // Використовуємо Debug для друку
}

// Приклад 8: Структура File з Debug
#[derive(Debug)]
struct File {
    name: String,
    data: String,
}

fn main() {
    let f = File {
        name: String::from("readme.md"),
        data: "Rust By Practice".to_string(),
    };

    let _name = f.name;

    // Тепер потрібно використовувати правильне посилання на структуру f
    println!("{}, {}, {:?}", f.name, f.data, f); // Використовуємо структуру f
}
