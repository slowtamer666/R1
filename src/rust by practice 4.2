use std::mem::size_of_val;
fn main() {
    let c1 = 'a';
    assert_eq!(size_of_val(&c1), 4); // Розмір `char` у Rust завжди 4 байти

    let c2 = '中';
    assert_eq!(size_of_val(&c2), 4); // Також займає 4 байти

    println!("Success!");
}


fn main() {
    let c1 = '中'; // `char` замість `&str`
    print_char(c1);
}

fn print_char(c: char) {
    println!("{}", c);
}


fn main() {
    let _f: bool = false;

    let t = false; // Змінюємо значення `t` на `false`
    if !t {
        println!("Success!");
    }
}


fn main() {
    let f = false;
    let t = true && false;
    assert_eq!(t, f);

    println!("Success!");
}


fn main() {
    let _v: () = ();

    let v = ();
    assert_eq!(v, implicitly_ret_unit()); // `implicitly_ret_unit` повертає `()`

    println!("Success!");
}

fn implicitly_ret_unit() {
    println!("I will return a ()");
}


use std::mem::size_of_val;
fn main() {
    let unit: () = ();
    assert!(size_of_val(&unit) == 0); // Розмір `()` — 0 байтів

    println!("Success!");
}
