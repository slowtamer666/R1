fn main() {
    // Don't modify the following two lines!
    let (x, y) = (1, 2);
    let s = sum(x, y);

    assert_eq!(s, 3);

    println!("Success!");
}

fn sum(x: i32, y: i32) -> i32 { // Додаємо тип повернення `i32`
    x + y
}


fn main() {
    print();
}

// Заміна типу `i32` на `()`
fn print() -> () {
    println!("Success!");
}


fn main() {
    print();
}

// Видаляємо тип повернення, щоб Rust автоматично припустив `()`
fn print() {
    println!("Success!");
}
fn main() {
    never_return();

    // Код не дійде до цієї частини
    // println!("Failed!");
}

fn never_return() -> ! {
    panic!("This function never returns!"); // Використання паніки для зупинки виконання
}


fn main() {
    never_return();

    // Код не дійде до цієї частини
    // println!("Failed!");
}

fn never_return() -> ! {
    loop {} // Використання нескінченного циклу
}


fn main() {
    println!("Success!");
}

fn get_option(tp: u8) -> Option<i32> {
    match tp {
        1 => Some(42),
        _ => never_return_fn(),
    }
}

// Варіант 1: паніка
fn never_return_fn() -> ! {
    panic!("This function never returns!")
}

// Варіант 2: нескінченний цикл
fn never_return_fn() -> ! {
    loop {}
}

// Варіант 3: рекурсія
fn never_return_fn() -> ! {
    never_return_fn()
}
