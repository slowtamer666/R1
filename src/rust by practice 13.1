fn drink(beverage: &str) {
    if beverage == "lemonade" {
        println!("Success!");
        // IMPLEMENT the below code
        return;  // Exit the function after successful match
     }

    println!("Exercise Failed if printing out this line!");
}

fn main() {
    drink("lemonade");  // Pass the correct argument

    println!("Exercise Failed if printing out this line!");
}
fn main() {
    assert_eq!("abc".as_bytes(), [97, 98, 99]);

    let v = vec![1, 2, 3];
    // Avoid panic using `get` method which returns Option
    let ele = v.get(3);
    match ele {
        Some(value) => println!("Element: {}", value),
        None => println!("Element not found!"),
    }

    // Handle production_rate_per_hour gracefully
    let v = production_rate_per_hour(2);
    println!("Production rate per hour: {}", v);

    // Handle division by zero gracefully
    divide(15, 0);

    println!("Success!")
}

fn divide(x:u8, y:u8) {
    if y != 0 {
        println!("{}", x / y);
    } else {
        println!("Cannot divide by zero!");
    }
}

fn production_rate_per_hour(speed: u8) -> f64 {
    let cph: u8 = 221;
    match speed {
        1..=4 => (speed * cph) as f64,
        5..=8 => (speed * cph) as f64 * 0.9,
        9..=10 => (speed * cph) as f64 * 0.77,
        _ => 0.0,
    }
}

pub fn working_items_per_minute(speed: u8) -> u32 {
    (production_rate_per_hour(speed) / 60.0) as u32
}
fn main() {
    assert_eq!("abc".as_bytes(), [97, 98, 99]);

    let v = vec![1, 2, 3];
    // Avoid panic using `get` method which returns Option
    let ele = v.get(3);
    match ele {
        Some(value) => println!("Element: {}", value),
        None => println!("Element not found!"),
    }

    // Handle production_rate_per_hour gracefully
    let v = production_rate_per_hour(2);
    println!("Production rate per hour: {}", v);

    // Handle division by zero gracefully
    divide(15, 0);

    println!("Success!")
}

fn divide(x:u8, y:u8) {
    if y != 0 {
        println!("{}", x / y);
    } else {
        println!("Cannot divide by zero!");
    }
}

fn production_rate_per_hour(speed: u8) -> f64 {
    let cph: u8 = 221;
    match speed {
        1..=4 => (speed * cph) as f64,
        5..=8 => (speed * cph) as f64 * 0.9,
        9..=10 => (speed * cph) as f64 * 0.77,
        _ => 0.0,
    }
}

pub fn working_items_per_minute(speed: u8) -> u32 {
    (production_rate_per_hour(speed) / 60.0) as u32
}
